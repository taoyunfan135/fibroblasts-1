Figure1A-B
rm(list = ls())
setwd("/path/")
rm(list=ls())
library(Seurat)
library(magrittr)
library(harmony)
library(dplyr)
library(tidyverse)
library(patchwork)
setwd("/path/")
#combined
OS1.data <- Read10X(data.dir = "/media/5T/5T/1/OSpatient/OSp/p1")
OS2.data <- Read10X(data.dir = "/media/5T/5T/1/OSpatient/OSp/p2/3bb")
OS3.data <- Read10X(data.dir = "/media/5T/5T/1/OSpatient/OSp/p3")
OS4.data <- Read10X(data.dir = "/media/5T/5T/4/cellranger_result/outs/filtered_feature_bc_matrix")
OS5.data <- Read10X(data.dir = "/media/5T/5T/6/cellranger_result/outs/filtered_feature_bc_matrix1")
OS6.data <- Read10X(data.dir = "/media/5T/5T/7/cellranger_result/outs/filtered_feature_bc_matrix2")
OS1 <- CreateSeuratObject(counts = OS1.data, project = "patient 1", min.cells = 3, min.features = 200)
OS2 <- CreateSeuratObject(counts = OS2.data, project = "patient 2", min.cells = 3, min.features = 200)
OS3 <- CreateSeuratObject(counts = OS3.data, project = "patient 3", min.cells = 3, min.features = 200)
OS4 <- CreateSeuratObject(counts = OS4.data, project = "patient 4", min.cells = 3, min.features = 200)
OS5 <- CreateSeuratObject(counts = OS5.data, project = "patient 5", min.cells = 3, min.features = 200)
OS6 <- CreateSeuratObject(counts = OS6.data, project = "patient 6", min.cells = 3, min.features = 200)
OS.combined <- merge(OS1, y = list(OS2, OS3, OS4, OS5, OS6), add.cell.ids = c("P1","P2","P3","P4","P5","P6"), project = "Osteosarcoma")
table(OS.combined$orig.ident)
colnames(OS.combined)
rownames(OS.combined)
OS.combined_copy <- OS.combined
OS.combined <- OS.combined[,sample(colnames(OS.combined),1000)]
scRNA<- OS.combined

#Calculating mitochondrial ratio and ribosome ratio
OS.combined[["percent.mt"]] <- PercentageFeatureSet(OS.combined, pattern = "^MT-")
OS.combined[["percent.rb"]] <- PercentageFeatureSet(OS.combined, pattern = "^RB[SL]")
pdf(file="vlnplot_before_qc.pdf",width = 6.5, height = 5.5)
VlnPlot(OS.combined, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 4,pt.size=0)
dev.off()

pdf(file="nCount_RNAVSpercent.mt.pdf",width = 13, height = 5.5)
plot1 <- FeatureScatter(OS.combined, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(OS.combined, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
dev.off()

OS.combined<- subset(OS.combined, subset = nFeature_RNA > 300 & nFeature_RNA < 4500 & percent.mt < 10)
scRNA<- subset(OS.combined, subset = nFeature_RNA > 300 & nFeature_RNA < 4500 & percent.mt < 10)
OS.combined <- NormalizeData(OS.combined, normalization.method = "LogNormalize", scale.factor = 10000)
OS.combined <- NormalizeData(OS.combined)
OS.combined <- FindVariableFeatures(OS.combined, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(OS.combined), 10)
OS.combined <- FindVariableFeatures(OS.combined, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(OS.combined), 10)
pdf(file="High variable gene.pdf",width = 13, height = 5.5)
plot1 <- VariableFeaturePlot(OS.combined)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
dev.off()

all.genes <- rownames(OS.combined)
OS.combined <- ScaleData(OS.combined, features = all.genes)

#Cell Cycle Score
g2m_genes <- cc.genes$g2m.genes
g2m_genes <- CaseMatch(search=g2m_genes, match=rownames(OS.combined))
s_genes <- cc.genes$s.genes    
s_genes <- CaseMatch(search=s_genes, match=rownames(OS.combined))
OS.combined <- CellCycleScoring(OS.combined, g2m.features=g2m_genes, s.features=s_genes)
tmp <- RunPCA(OS.combined, features = c(g2m_genes, s_genes), verbose = F)
p <- DimPlot(tmp, reduction = "pca", group.by = "orig.ident")
ggsave("CellCycle_pca.png", p, width = 8, height = 6)
ggsave("CellCycle_pca.pdf", p, width = 8, height = 6)

#See the effect of mitochondria on the sample
mt.genes <- grep("^MT-", rownames(OS.combined), value=T, ignore.case=T)
tmp <- RunPCA(OS.combined, features = mt.genes, verbose = F)
p <- DimPlot(tmp, reduction = "pca", group.by = "orig.ident")
ggsave("mito_pca.png", p, width = 8, height = 6)
ggsave("mito_pca.pdf", p, width = 8, height = 6)
rm(tmp)

#See the effect of ribosomes on samples
rb.genes <- grep("^RP[SL]", rownames(OS.combined), value=T, ignore.case=T)
tmp <- RunPCA(OS.combined, features = rb.genes, verbose = F)
p <- DimPlot(tmp, reduction = "pca", group.by = "orig.ident")
ggsave("ribo_pca.png", p, width = 8, height = 6)
ggsave("mito_pca.pdf", p, width = 8, height = 6)
rm(tmp)

#PCA
OS.combined <- RunPCA(OS.combined, features = VariableFeatures(object = OS.combined))
ElbowPlot(OS.combined, ndims = 50)

#Harmony
OS.combined <- OS.combined %>% 
  RunHarmony("orig.ident", plot_convergence = TRUE)
harmony_embeddings <- Embeddings(OS.combined, 'harmony')

OS.combined <- OS.combined %>%
  RunTSNE(reduction = "harmony", dims = 1:40) %>% 
  RunUMAP(reduction="harmony", dims=1:40) %>%
  FindNeighbors(reduction = "harmony", dims = 1:40) %>% 
  FindClusters(resolution = 0.15) %>% 
  identity()
saveRDS(OS.combined, file="originalharmony.rds")

rm(list = ls())

DimPlot(OS.combined, reduction = "tsne", label=T) 
ggsave("tsne-unknow.pdf",width = 8, height = 5)

DimPlot(OS.combined, reduction = "umap", label=T) 
ggsave("umap.pdf",width = 8, height = 5)
dev.off()

pdf(file="allmarker0.1.pdf",width = 50, height = 60)
VlnPlot(OS.combined, features = c("COL1A1","ACTA2","THY1","C1QB","C1QA",'IGHG1','MZB1',"JCHAIN","CD3D","CD3E","CD8A","GZMA","C15orf48","MNDA","FCN1","ALPL","EGFL7","PLVAP","MS4A1","CD79A","IL3RA","CPA3","CMA1","CTSG"), slot = "counts", log = TRUE,pt.size=0)
dev.off()

OS.combined.markers <- FindAllMarkers(OS.combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
write.csv(OS.combined.markers,file = "/media/5T/5T/analyze20210130OS6/OS.markercz.csv")

#Defining cellular subpopulations
new.cluster.ids <- c("Macrophage","OB1","T cells","Monocyte","OC","CAFs","Plasmocytes","Endothelial","B cells","PDc","unkown","Mast","OB2")
names(new.cluster.ids) <- levels(OS.combined)
OS.combined <- RenameIdents(OS.combined, new.cluster.ids)

#TSNE
new.cluster.ids <- c("Macrophage","OB1","T cells","Monocyte","OC","CAFs","Plasmocytes","Endothelial","B cells","PDc","unkown","Mast1","OB2")
names(new.cluster.ids) <- levels(OS.combined)
OS.combined <- RenameIdents(OS.combined, new.cluster.ids)
p <- DimPlot(OS.combined,reduction="tsne",label=T)
ggsave("tsnecelltype.pdf",width = 8, height = 5)
dev.off()

p <- DimPlot(OS.combined, group.by = "orig.ident", split.by = 'orig.ident')
ggsave("umapgroup.png",width = 30, height = 5)
ggsave("umapgroup.eps",width = 30, height = 5)

p <- DimPlot(OS.combined,group.by = "Phase")
ggsave("umapPhase.png",width = 6, height = 5)
ggsave("umapPhase.eps",width = 6, height = 5)
ggsave("umapPhase.pdf",width = 6, height = 5)

p <- DimPlot(OS.combined)
ggsave("umap.png",width = 8, height = 5)
ggsave("umap.eps",width = 8, height = 5)
ggsave("umap.pdf",width = 8, height = 5)

saveRDS(OS.combined, file="OS.combined0724harmony.rds")
OS <- OS.combined

Figure1C-D
rm(list = ls())
options(stringsAsFactors = F)
library(psych)
library(qgraph)
library(igraph)
library(purrr)
library(ggsci)
library(scales)
setwd("/path/")
mynet <- read.table("count_network.txt",header = T, check.names = F, sep = "\t")
head(mynet)
mynet <- mynet[mynet$count != 0,]
net<- graph_from_data_frame(mynet)
plot(net)
mypal = pal_simpsons("springfield")(13)
mypal = pal_ucscgb("default")(13)
mypal = pal_igv("default")(13)
show_col(mypal)
allcolour=c(mypal)

allcolour <- c('#E5D2DD', '#53A85F', '#F1BB72', '#F3B1A0', '#D6E7A3', '#57C3F3', '#476D87',
               '#E95C59', '#E59CC4', '#AB3282', '#23452F', '#BD956A', '#8C549C', '#585658',
               '#9FA3A8', '#E0D4CA', '#5F3D69', '#C5DEBA', '#58A4C3', '#E4C755', '#F7F398',
               '#AA9A59', '#E63863', '#E39A35', '#C1E6F3', '#6778AE', '#91D0BE', '#B53E2B',
               '#712820', '#DCC1DD', '#CCE0F5',  '#CCC9E6', '#625D9E', '#68A180', '#3A6963',
               '#968175')
karate_groups <- cluster_optimal(net)
coords <- layout_in_circle(net, order = order(membership(karate_groups)))
E(net)$width  <- E(net)$count/50 
plot(net, edge.arrow.size=0, 
     edge.curved=0,
     vertex.color=allcolour,
     vertex.frame.color="#555555",
     vertex.label.color="black",
     layout = coords,
     vertex.label.cex=1,
     vertex.size=30) 

net2 <- net 
#Overall circle diagram
for (i in 1: length(unique(mynet$SOURCE)) ){
  E(net)[map(unique(mynet$SOURCE),function(x) {
    get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x))
  })%>% unlist()]$color <- allcolour[i]
} 
pdf(file="all.pdf",width = 6, height = 6)
plot(net, edge.arrow.size=0, 
     edge.curved=0.4,
     vertex.color=allcolour,
     vertex.frame.color="#555555",
     vertex.label.color="black",
     layout = coords,
     vertex.label.cex=1,
     vertex.size=30)
dev.off()

#single-loop diagram
for (i in 1: length(unique(mynet$SOURCE)) ){
  net1<-net2
  E(net1)$count <- ""
  E(net1)[map(unique(mynet$SOURCE),function(x) {
    get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x))
  })%>% unlist()]$count  <- E(net2)[map(unique(mynet$SOURCE),function(x) {
    get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x))
  })%>% unlist()]$count  
  
  E(net1)[map(unique(mynet$SOURCE),function(x) {
    get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x))
  })%>% unlist()]$color <- allcolour[i]
  name = i
  pdf(file=paste0(name,".pdf"),width = 6, height = 6)
  plot(net1, edge.arrow.size=.1, 
       edge.curved=0.4,
       edge.label = E(net1)$count, 
       vertex.color=allcolour,
       vertex.frame.color="#555555",
       vertex.label.color="black",
       layout = coords,
       vertex.label.cex=1,
       vertex.size=30) 
  dev.off()  
}

#Selection of Ligand Receptors and Bubble Drawing
cellphonedb plot dot_plot --means-path means.txt --pvalues-path pvalues.txt \
--rows row.txt --columns col.txt \
--output-path outdotplot/ --output-name EC.pdf

Figure2A-C
rm(list=ls())
library(limma)
library(WGCNA)
expFile="target symbol85.txt"     
immFile="TMEscore2.txt"     
setwd("/path/")     
rt=read.table(expFile, header=T, sep="\t", check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)), nrow=nrow(exp), dimnames=dimnames)
data=avereps(data)

#Delete normal samples
group=sapply(strsplit(colnames(data),"\\-"), "[", 4)
group=sapply(strsplit(group,""), "[", 1)
group=gsub("2", "1", group)
data=data[,group==0,drop=F]
data=log2(data+1)
data=data[rowMeans(data)>0.2,]
data=data[apply(data,1,sd)>0.2,]     
datExpr0=t(data)

gsg = goodSamplesGenes(datExpr0, verbose = 3)
if (!gsg$allOK){
	# Optionally, print the gene and sample names that were removed:
	if (sum(!gsg$goodGenes)>0)
	    printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")))
	if (sum(!gsg$goodSamples)>0)
	    printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")))
	# Remove the offending genes and samples from the data:
	datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}

#Sample clustering to find stray samples
sampleTree = hclust(dist(datExpr0), method = "average")
pdf(file = "1_sample_cluster.pdf", width = 12, height = 9)
par(cex = 0.6)
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
abline(h = 10000, col = "red")
dev.off()

#Delete samples below the shear line
clust = cutreeStatic(sampleTree, cutHeight = 10000, minSize = 10)
table(clust)
keepSamples = (clust==1)
datExpr0 = datExpr0[keepSamples, ]
enableWGCNAThreads()   
powers = c(1:20)       
sft = pickSoftThreshold(datExpr0, powerVector = powers, verbose = 5)
pdf(file="2_scale_independence.pdf",width=9,height=5)
par(mfrow = c(1,2))
cex1 = 0.9

#Scatterplot of fit indices versus power values
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");
abline(h=0.90,col="red") 

#Scatterplot of average connectivity vs. power values
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
dev.off()

#adjacency matrix conversion
sft 
softPower =sft$powerEstimate 
adjacency = adjacency(datExpr0, power = softPower)
softPower

#TOM
TOM = TOMsimilarity(adjacency)
dissTOM = 1-TOM

#gene clustering
geneTree = hclust(as.dist(dissTOM), method = "average");
pdf(file="3_gene_clustering.pdf",width=12,height=9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
     labels = FALSE, hang = 0.04)
dev.off()

#Dynamic Shear Module Recognition
minModuleSize=40      
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
                            deepSplit = 2, pamRespectsDendro = FALSE,
                            minClusterSize = minModuleSize);
table(dynamicMods)
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
pdf(file="4_Dynamic_Tree.pdf",width=8,height=6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05,
                    main = "Gene dendrogram and module colors")
dev.off()

#Find Similar Modules Clustering
MEList = moduleEigengenes(datExpr0, colors = dynamicColors)
MEs = MEList$eigengenes
MEDiss = 1-cor(MEs);
METree = hclust(as.dist(MEDiss), method = "average")
pdf(file="5_Clustering_module.pdf",width=7,height=7)
plot(METree, main = "Clustering of module eigengenes",
     xlab = "", sub = "")
MEDissThres = 0.25   
abline(h=MEDissThres, col = "red")
dev.off()

#Merging of similar modules
merge = mergeCloseModules(datExpr0, dynamicColors, cutHeight = MEDissThres, verbose = 3)
mergedColors = merge$colors
mergedMEs = merge$newMEs
pdf(file="6_merged_dynamic.pdf", width = 9, height = 6)
plotDendroAndColors(geneTree, mergedColors,"Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05,
                    main = "Gene dendrogram and module colors")
dev.off()
moduleColors = mergedColors
table(moduleColors)
colorOrder = c("grey", standardColors(50))
moduleLabels = match(moduleColors, colorOrder)-1
MEs = mergedMEs

#Heatmap the correlation between modules and immune cells
immune=read.table(immFile, header=T, sep="\t", check.names=F, row.names=1)
immune=immune[immune[,"P-value"]<0.05,]
cli=as.matrix(immune[,1:(ncol(immune)-3)])
sameSample=intersect(row.names(immune), row.names(MEs))
MEs=MEs[sameSample,,drop=F]
datTraits=immune[sameSample,,drop=F]
nGenes = ncol(datExpr0)
nSamples = nrow(datExpr0)
moduleTraitCor = cor(MEs, datTraits, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)

#Heat mapping for correlation
pdf(file="7_Module_trait.pdf", width=10, height=8)
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
                   signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(9, 9, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = colnames(datTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))
dev.off()
probes = colnames(datExpr0)
geneInfo0 = data.frame(probes= probes,
                       moduleColor = moduleColors)
geneOrder =order(geneInfo0$moduleColor)
geneInfo = geneInfo0[geneOrder, ]
write.table(geneInfo, file = "module_all.txt",sep="\t",row.names=F,quote=F)

#Export the genes for each module
for (mod in 1:nrow(table(moduleColors))){  
	modules = names(table(moduleColors))[mod]
	probes = colnames(datExpr0)
	inModule = (moduleColors == modules)
	modGenes = probes[inModule]
	write.table(modGenes, file =paste0("module_",modules,".txt"),sep="\t",row.names=F,col.names=F,quote=F)
}

Figure2D
library(survival)      
pFilter=0.05           
setwd("/path/")     
rt=read.table("input.txt", header=T, sep="\t", check.names=F, row.names=1)
rt$futime=rt$futime/365      

#One-factor cox analysis
outTab=data.frame()
sigGenes=c("futime","fustat")
for(gene in colnames(rt[,3:ncol(rt)])){
	cox=coxph(Surv(futime, fustat) ~ rt[,gene], data = rt)
	coxSummary = summary(cox)
	coxP=coxSummary$coefficients[,"Pr(>|z|)"]
		
	if(coxP<pFilter){
		sigGenes=c(sigGenes,gene)
		outTab=rbind(outTab,
			       cbind(gene=gene,
			       HR=coxSummary$conf.int[,"exp(coef)"],
			       HR.95L=coxSummary$conf.int[,"lower .95"],
			       HR.95H=coxSummary$conf.int[,"upper .95"],
				   pvalue=coxP) )
	}
}

#output
write.table(outTab,file="uniCox.txt",sep="\t",row.names=F,quote=F)
surSigExp=rt[,sigGenes]
surSigExp=cbind(id=row.names(surSigExp), surSigExp)
write.table(surSigExp,file="uniSigExp.txt",sep="\t",row.names=F,quote=F)


#Customizing the forest plotting function
bioForest=function(coxFile=null,forestFile=null){
	rt <- read.table(coxFile,header=T,sep="\t",row.names=1,check.names=F)
	gene <- rownames(rt)
	hr <- sprintf("%.3f",rt$"HR")
	hrLow  <- sprintf("%.3f",rt$"HR.95L")
	hrLow[hrLow<0.001]=0.001
	hrHigh <- sprintf("%.3f",rt$"HR.95H")
	Hazard.ratio <- paste0(hr,"(",hrLow,"-",hrHigh,")")
	pVal <- ifelse(rt$pvalue<0.001, "<0.001", sprintf("%.3f", rt$pvalue))
		
	height=(nrow(rt)/15)+5.5
	pdf(file=forestFile, width=7, height=height)
	n <- nrow(rt)
	nRow <- n+1
	ylim <- c(1,nRow)
	layout(matrix(c(1,2),nc=2),width=c(3,2.5))
		
	xlim = c(0,3)
	par(mar=c(4,2.5,2,1))
	plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,xlab="",ylab="")
	text.cex=0.8
	text(0,n:1,gene,adj=0,cex=text.cex)
	text(1.5-0.5*0.2,n:1,pVal,adj=1,cex=text.cex);text(1.5-0.5*0.2,n+1,'pvalue',cex=text.cex,adj=1)
	text(3,n:1,Hazard.ratio,adj=1,cex=text.cex);text(3,n+1,'Hazard ratio',cex=text.cex,adj=1,)
		
	par(mar=c(4,1,2,1),mgp=c(2,0.5,0))
	LOGindex=2 
	hrLow = log(as.numeric(hrLow),LOGindex)
	hrHigh = log(as.numeric(hrHigh),LOGindex)
	hr = log(as.numeric(hr),LOGindex)
	xlim = c(floor(min(hrLow,hrHigh)),ceiling(max(hrLow,hrHigh)))
	plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,ylab="",xaxs="i",xlab="Hazard ratio")
	arrows(as.numeric(hrLow),n:1,as.numeric(hrHigh),n:1,angle=90,code=3,length=0.05,col="darkblue",lwd=2.5)
	abline(v=log(1,LOGindex),col="black",lty=2,lwd=2)
	boxcolor = ifelse(as.numeric(hr) > log(1,LOGindex), "red", "green")
	points(as.numeric(hr), n:1, pch = 15, col = boxcolor, cex=1.3)
	a1 = axis(1,labels=F,tick=F)
	axis(1,a1,LOGindex^a1)
	dev.off()
}

#Mapping of forests
bioForest(coxFile="uniCox.txt", forestFile="forest.pdf")

Figure2E-F,Figure3F-G
set.seed(123456)
library("glmnet")
library("survival")
coxSigFile="uniSigExp.txt"    
geoFile="geo.expTime.txt"    
setwd("/path/")   
rt=read.table(coxSigFile, header=T, sep="\t", check.names=F, row.names=1)
rt$futime[rt$futime<=0]=0.003

#Constructing lasso regression models
x=as.matrix(rt[,c(3:ncol(rt))])
y=data.matrix(Surv(rt$futime, rt$fustat))
fit=glmnet(x, y, family="cox", maxit=1000)
pdf("lasso.lambda.pdf")
plot(fit, xvar="lambda", label=TRUE)
dev.off()
cvfit=cv.glmnet(x, y, family="cox", maxit=1000)
pdf("lasso.cvfit.pdf")
plot(cvfit)
abline(v=log(c(cvfit$lambda.min,cvfit$lambda.1se)), lty="dashed")
dev.off()

#Lasso significant gene expression
coef=coef(fit, s=cvfit$lambda.min)
index=which(coef != 0)
actCoef=coef[index]
lassoGene=row.names(coef)[index]
lassoSigExp=rt[,c("futime", "fustat", lassoGene)]
lassoSigExpOut=cbind(id=row.names(lassoSigExp), lassoSigExp)
write.table(lassoSigExpOut,file="lasso.SigExp.txt",sep="\t",row.names=F,quote=F)

#Constructing the COX model
multiCox=coxph(Surv(futime, fustat) ~ ., data = lassoSigExp)
multiCox=step(multiCox,direction = "both")
multiCoxSum=summary(multiCox)

#Equation for the output model
outMultiTab=data.frame()
outMultiTab=cbind(
		          coef=multiCoxSum$coefficients[,"coef"],
		          HR=multiCoxSum$conf.int[,"exp(coef)"],
		          HR.95L=multiCoxSum$conf.int[,"lower .95"],
		          HR.95H=multiCoxSum$conf.int[,"upper .95"],
		          pvalue=multiCoxSum$coefficients[,"Pr(>|z|)"])
outMultiTab=cbind(id=row.names(outMultiTab), outMultiTab)
outMultiTab=outMultiTab[,1:2]
write.table(outMultiTab, file="multiCox.txt", sep="\t", row.names=F, quote=F)

#Train group risk values
trainScore=predict(multiCox, type="risk", newdata=rt)
coxGene=rownames(multiCoxSum$coefficients)
coxGene=gsub("`","",coxGene)
outCol=c("futime","fustat",coxGene)
risk=as.vector(ifelse(trainScore>median(trainScore),"high","low"))
outTab=cbind(rt[,outCol],riskScore=as.vector(trainScore),risk)
write.table(cbind(id=rownames(outTab),outTab),file="risk.TCGA.txt",sep="\t",quote=F,row.names=F)

#Test group risk values
rt=read.table(geoFile, header=T, sep="\t", check.names=F, row.names=1)
rt$futime=rt$futime/365
testFinalGeneExp=rt[,coxGene]
testScore=predict(multiCox,type="risk",newdata=rt)
outCol=c("futime","fustat",coxGene)
risk=as.vector(ifelse(testScore>median(trainScore),"high","low"))
outTab=cbind(rt[,outCol],riskScore=as.vector(testScore),risk)
write.table(cbind(id=rownames(outTab),outTab),file="risk.GEO.txt",sep="\t",quote=F,row.names=F)

Figure3A/C
library(pheatmap)   
setwd("/path/")  
#risk curves
bioRiskPlot=function(inputFile=null, project=null){
	rt=read.table(inputFile, header=T, sep="\t", check.names=F, row.names=1)  
	rt=rt[order(rt$riskScore),]    
		
	riskClass=rt[,"risk"]
	lowLength=length(riskClass[riskClass=="low"])
	highLength=length(riskClass[riskClass=="high"])
	lowMax=max(rt$riskScore[riskClass=="low"])
	line=rt[,"riskScore"]
	line[line>10]=10
	pdf(file=paste0(project, ".riskScore.pdf"), width=7, height=4)
	plot(line, type="p", pch=20,
		 xlab="Patients (increasing risk socre)",
		 ylab="Risk score",
		 col=c(rep("green",lowLength),rep("red",highLength)) )
	abline(h=lowMax,v=lowLength,lty=2)
	legend("topleft", c("High risk","Low risk"),bty="n",pch=19,col=c("red","green"),cex=1.2)
	dev.off()
		
	color=as.vector(rt$fustat)
	color[color==1]="red"
	color[color==0]="green"
	pdf(file=paste0(project, ".survStat.pdf"), width=7, height=4)
	plot(rt$futime, pch=19,
		 xlab="Patients (increasing risk socre)",
		 ylab="Survival time (years)",
		 col=color)
	legend("topleft", c("Dead","Alive"),bty="n",pch=19,col=c("red","green"),cex=1.2)
	abline(v=lowLength,lty=2)
	dev.off()
	
	ann_colors=list()
	bioCol=c("blue", "red")
	names(bioCol)=c("low", "high")
	ann_colors[["Risk"]]=bioCol

	rt1=rt[c(3:(ncol(rt)-2))]
	rt1=t(rt1)
	annotation=data.frame(Risk=rt[,ncol(rt)])
	rownames(annotation)=rownames(rt)
	pdf(file=paste0(project, ".heatmap.pdf"), width=7, height=4)
	pheatmap(rt1, 
		     annotation=annotation,
		     annotation_colors = ann_colors, 
		     cluster_cols = FALSE,
		     cluster_rows = FALSE,
		     show_colnames = F,
		     scale="row",
		     color = colorRampPalette(c(rep("green",3.5), "white", rep("red",3.5)))(50),
		     fontsize_col=3,
		     fontsize=7,
		     fontsize_row=8)
	dev.off()
}
bioRiskPlot(inputFile="risk.TCGA.txt", project="TCGA")
bioRiskPlot(inputFile="risk.GEO.txt", project="GEO")


Figure3B,Figure4C
rm(list=ls())
library(plyr)
library(ggplot2)
library(ggpubr)

riskFile="GSE21257.txt"      
cliFile="#####.txt"       
trait="Metastatic"           
setwd("/path/")    
risk=read.table(riskFile, header=T, sep="\t", check.names=F, row.names=1)
cli=read.table(cliFile, header=T, sep="\t", check.names=F, row.names=1)
sameSample=intersect(row.names(risk), row.names(cli))
rt=cbind(risk[sameSample,,drop=F], cli[sameSample,,drop=F])
rt$risk=factor(rt$risk, levels=c("Low", "High"))

#Defining Colors for Bar Charts
bioCol=c("#0066FF","#FF0000","#FF9900","#6E568C","#7CC767","#223D6C","#D20A13","#FFD121","#088247","#11AA4D")
bioCol=bioCol[1:length(unique(rt[,trait]))]

#Percentage of patients in statistical high and low risk groups
rt1=rt[,c(trait, "risk")]
colnames(rt1)=c("trait", "risk")
rt1=rt1[apply(rt1,1,function(x)any(is.na(match('unknow',x)))),,drop=F]
df=as.data.frame(table(rt1))
df=ddply(df, .(risk), transform, percent = Freq/sum(Freq) * 100)
df=ddply(df, .(risk), transform, pos = (cumsum(Freq) - 0.5 * Freq))
df$label=paste0(sprintf("%.0f", df$percent), "%")
p=ggplot(df, aes(x = factor(risk), y = percent, fill = trait)) +
	   geom_bar(position = position_stack(), stat = "identity", width = .7) +
	   scale_fill_manual(values=bioCol)+
	   xlab("riskScore")+ ylab("Percent weight")+  guides(fill=guide_legend(title=trait))+
	   geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3) +
	   #coord_flip()+
	   theme_bw()
pdf(file=paste0(trait, ".barplot.pdf"), width=4, height=5)
print(p)
dev.off()

Figure3D,Figure4A
library(survival)
library(survminer)
setwd("/path/")   
#survival analysis
bioSurvival=function(inputFile=null, outFile=null){
	rt=read.table(inputFile, header=T, sep="\t", check.names=F)
	
	diff=survdiff(Surv(futime, fustat) ~risk,data = rt)
	pValue=1-pchisq(diff$chisq, df=1)
	if(pValue<0.001){
		pValue="p<0.001"
	}else{
		pValue=paste0("p=",sprintf("%.03f",pValue))
	}
	fit <- survfit(Surv(futime, fustat) ~ risk, data = rt)
		
	surPlot=ggsurvplot(fit, 
		           data=rt,
		           conf.int=T,
		           pval=pValue,
		           pval.size=6,
		           legend.title="Risk",
		           legend.labs=c("High risk", "Low risk"),
		           xlab="Time(years)",
		           break.time.by = 1,
		           palette=c("red", "blue"),)
	pdf(file=outFile, width=6.5, height=5.5, onefile=FALSE)
	print(surPlot)
	dev.off()
}

#Plotting survival curves
bioSurvival(inputFile="risk.TCGA.txt", outFile="survival.TCGA.pdf")
bioSurvival(inputFile="risk.GEO.txt", outFile="survival.GEO.pdf")

Figure3E,Figure4B
library(survival)
library(survminer)
library(timeROC)
riskFile="risk.TCGA.txt"    
cliFile="clinical.txt"       
setwd("/path/")   
risk=read.table(riskFile, header=T, sep="\t", check.names=F, row.names=1)
risk=risk[,c("futime", "fustat", "riskScore")]
cli=read.table(cliFile, header=T, sep="\t", check.names=F, row.names=1)
samSample=intersect(row.names(risk), row.names(cli))
risk1=risk[samSample,,drop=F]
cli=cli[samSample,,drop=F]
rt=cbind(risk1, cli)
bioCol=rainbow(ncol(rt)-1, s=0.9, v=0.9)

#the ROC curve for 1,3,5years
ROC_rt=timeROC(T=risk$futime, delta=risk$fustat,
	           marker=risk$riskScore, cause=1,
	           weighting='aalen',
	           times=c(1,3,5), ROC=TRUE)
pdf(file="ROC.pdf", width=5.5, height=5.5)
plot(ROC_rt,time=1,col=bioCol[1],title=FALSE,lwd=2)
plot(ROC_rt,time=3,col=bioCol[2],add=TRUE,title=FALSE,lwd=2)
plot(ROC_rt,time=5,col=bioCol[3],add=TRUE,title=FALSE,lwd=2)
legend('bottomright',
	   c(paste0('AUC at 1 years: ',sprintf("%.03f",ROC_rt$AUC[1])),
	     paste0('AUC at 3 years: ',sprintf("%.03f",ROC_rt$AUC[2])),
	     paste0('AUC at 5 years: ',sprintf("%.03f",ROC_rt$AUC[3]))),
	   col=bioCol[1:3], lwd=2, bty = 'n')
dev.off()

#Plotting the ROC curve for clinical
predictTime=1   
aucText=c()
pdf(file="cliROC.pdf", width=5.5, height=5.5)
i=3
ROC_rt=timeROC(T=risk$futime,
               delta=risk$fustat,
               marker=risk$riskScore, cause=1,
               weighting='aalen',
               times=c(predictTime),ROC=TRUE)
plot(ROC_rt, time=predictTime, col=bioCol[i-2], title=FALSE, lwd=2)
aucText=c(paste0("Risk", ", AUC=", sprintf("%.3f",ROC_rt$AUC[2])))
abline(0,1)
for(i in 4:ncol(rt)){
	ROC_rt=timeROC(T=rt$futime,
				   delta=rt$fustat,
				   marker=rt[,i], cause=1,
				   weighting='aalen',
				   times=c(predictTime),ROC=TRUE)
	plot(ROC_rt, time=predictTime, col=bioCol[i-2], title=FALSE, lwd=2, add=TRUE)
	aucText=c(aucText, paste0(colnames(rt)[i],", AUC=",sprintf("%.3f",ROC_rt$AUC[2])))
}
legend("bottomright", aucText,lwd=2,bty="n",col=bioCol[1:(ncol(rt)-1)])
dev.off()

Figure3F/G
rm(list=ls())
library(survival)  
setwd("/path/")    

bioForest=function(coxFile=null, forestFile=null, forestCol=null){
	rt <- read.table(coxFile, header=T, sep="\t", check.names=F, row.names=1)
	gene <- rownames(rt)
	hr <- sprintf("%.3f",rt$"HR")
	hrLow  <- sprintf("%.3f",rt$"HR.95L")
	hrHigh <- sprintf("%.3f",rt$"HR.95H")
	Hazard.ratio <- paste0(hr,"(",hrLow,"-",hrHigh,")")
	pVal <- ifelse(rt$pvalue<0.001, "<0.001", sprintf("%.3f", rt$pvalue))
		
	pdf(file=forestFile, width=6.5, height=4.5)
	n <- nrow(rt)
	nRow <- n+1
	ylim <- c(1,nRow)
	layout(matrix(c(1,2),nc=2),width=c(3,2.5))
		
	xlim = c(0,3)
	par(mar=c(4,2.5,2,1))
	plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,xlab="",ylab="")
	text.cex=0.8
	text(0,n:1,gene,adj=0,cex=text.cex)
	text(1.5-0.5*0.2,n:1,pVal,adj=1,cex=text.cex);text(1.5-0.5*0.2,n+1,'pvalue',cex=text.cex,font=2,adj=1)
	text(3.1,n:1,Hazard.ratio,adj=1,cex=text.cex);text(3.1,n+1,'Hazard ratio',cex=text.cex,font=2,adj=1)
		
	par(mar=c(4,1,2,1),mgp=c(2,0.5,0))
	xlim = c(0,max(as.numeric(hrLow),as.numeric(hrHigh)))
	plot(1,xlim=xlim,ylim=ylim,type="n",axes=F,ylab="",xaxs="i",xlab="Hazard ratio")
	arrows(as.numeric(hrLow),n:1,as.numeric(hrHigh),n:1,angle=90,code=3,length=0.05,col="darkblue",lwd=3)
	abline(v=1, col="black", lty=2, lwd=2)
	boxcolor = ifelse(as.numeric(hr) > 1, forestCol, forestCol)
	points(as.numeric(hr), n:1, pch = 15, col = boxcolor, cex=2)
	axis(1)
	dev.off()
}

indep=function(riskFile=null,cliFile=null,uniOutFile=null,multiOutFile=null,uniForest=null,multiForest=null){
	risk=read.table(riskFile, header=T, sep="\t", check.names=F, row.names=1)   
	cli=read.table(cliFile, header=T, sep="\t", check.names=F, row.names=1)      
	
	sameSample=intersect(row.names(cli),row.names(risk))
	risk=risk[sameSample,]
	cli=cli[sameSample,]
	rt=cbind(futime=risk[,1], fustat=risk[,2], cli, riskScore=risk[,(ncol(risk)-1)])
	
#Univariate prognostic analysis
	uniTab=data.frame()
	for(i in colnames(rt[,3:ncol(rt)])){
		 cox <- coxph(Surv(futime, fustat) ~ rt[,i], data = rt)
		 coxSummary = summary(cox)
		 uniTab=rbind(uniTab,
		              cbind(id=i,
		              HR=coxSummary$conf.int[,"exp(coef)"],
		              HR.95L=coxSummary$conf.int[,"lower .95"],
		              HR.95H=coxSummary$conf.int[,"upper .95"],
		              pvalue=coxSummary$coefficients[,"Pr(>|z|)"])
		              )
	}
	write.table(uniTab,file=uniOutFile,sep="\t",row.names=F,quote=F)
	bioForest(coxFile=uniOutFile, forestFile=uniForest, forestCol="green")

#Multivariate prognostic analysis
	uniTab=uniTab[as.numeric(uniTab[,"pvalue"])<1,]
	rt1=rt[,c("futime", "fustat", as.vector(uniTab[,"id"]))]
	multiCox=coxph(Surv(futime, fustat) ~ ., data = rt1)
	multiCoxSum=summary(multiCox)
	multiTab=data.frame()
	multiTab=cbind(
	             HR=multiCoxSum$conf.int[,"exp(coef)"],
	             HR.95L=multiCoxSum$conf.int[,"lower .95"],
	             HR.95H=multiCoxSum$conf.int[,"upper .95"],
	             pvalue=multiCoxSum$coefficients[,"Pr(>|z|)"])
	multiTab=cbind(id=row.names(multiTab),multiTab)
	write.table(multiTab,file=multiOutFile,sep="\t",row.names=F,quote=F)
	bioForest(coxFile=multiOutFile, forestFile=multiForest, forestCol="red")
}
indep(riskFile="risk.TCGA.txt",
      cliFile="clinical.txt",
      uniOutFile="uniCox.txt",
      multiOutFile="multiCox.txt",
      uniForest="uniForest.pdf",
      multiForest="multiForest.pdf")


Figure5A-B
rm(list = ls())
library(limma)
library(reshape2)
library(ggpubr)
riskFile="risk.TCGA.txt"       
scoreFile="TMEscores.txt"    
setwd("/path/")    

#Read the risk file
risk=read.table(riskFile, header=T, sep="\t", check.names=F, row.names=1)
risk$risk=factor(risk$risk, levels=c("low","high"))

#Data collation
score=read.table(scoreFile, header=T, sep="\t", check.names=F, row.names=1)
score=as.matrix(score)
row.names(score)=gsub("(.*?)\\-(.*?)\\-(.*?)\\-(.*?)\\-.*", "\\1\\-\\2\\-\\3", row.names(score))
score=avereps(score)
score=score[,1:3]

#Sample Taking Intersection
sameSample=intersect(row.names(risk), row.names(score))
risk=risk[sameSample,"risk",drop=F]
score=score[sameSample,,drop=F]
rt=cbind(risk, score)

data=melt(rt, id.vars=c("risk"))
colnames(data)=c("Risk", "scoreType", "Score")
p=ggviolin(data, x="scoreType", y="Score", fill = "Risk",
	     xlab="",
	     ylab="TME score of ESTIMATE",
	     legend.title="Risk",
	     add = "boxplot", add.params = list(color="white"),
	     palette = c("blue","red"), width=1)
p=p+rotate_x_text(45)
p1=p+stat_compare_means(aes(group=Risk),
	      method="wilcox.test",
	      symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), symbols = c("***", "**", "*", " ")),
	      label = "p.signif")
pdf(file="vioplot.pdf", width=6, height=5)
print(p1)
dev.off()

Figure5C-H
library(limma)
library(scales)
library(ggplot2)
library(ggtext)
library(reshape2)
library(tidyverse)
library(ggpubr)

riskFile="risk.TCGA.txt"      
immFile="MCPcounter1.txt"     
setwd("/path/")   
risk=read.table(riskFile, header=T, sep="\t", check.names=F, row.names=1)

immune=read.table(immFile, header=T, sep="\t", check.names=F, row.names=1)
immune=as.matrix(immune)
rownames(immune)=gsub("(.*?)\\-(.*?)\\-(.*?)\\-(.*)", "\\1\\-\\2\\-\\3", rownames(immune))
immune=avereps(immune)

sameSample=intersect(row.names(risk), row.names(immune))
risk=risk[sameSample, "riskScore"]
immune=immune[sameSample,]

x=as.numeric(risk)
x[x>quantile(x,0.99)]=quantile(x,0.99)
outTab=data.frame()
for(i in colnames(immune)){
	y=as.numeric(immune[,i])
	if(sd(y)<0.001){next}
	corT=cor.test(x, y, method="spearman")
	cor=corT$estimate
	pvalue=corT$p.value
	if(pvalue<0.05){
		outTab=rbind(outTab,cbind(immune=i, cor, pvalue))

		outFile=paste0("cor.", i, ".pdf")
		outFile=gsub("/", "_", outFile)
		df1=as.data.frame(cbind(x,y))
		p1=ggplot(df1, aes(x, y)) + 
				  xlab("Risk score") + ylab(i)+
				  geom_point() + geom_smooth(method="lm",formula = y ~ x) + theme_bw()+
				  stat_cor(method = 'spearman', aes(x =x, y =y))

		pdf(file=outFile, width=5, height=4.7)
		print(p1)
		dev.off()
	}
}
write.table(file="corResult.txt", outTab, sep="\t", quote=F, row.names=F)

corResult=read.table("corResult.txt", head=T, sep="\t")
corResult$Software=sapply(strsplit(corResult[,1],"_"), '[', 2)
corResult$Software=factor(corResult$Software,level=as.character(unique(corResult$Software[rev(order(as.character(corResult$Software)))])))
b=corResult[order(corResult$Software),]
b$immune=factor(b$immune,levels=rev(as.character(b$immune)))
colslabels=rep(hue_pal()(length(levels(b$Software))),table(b$Software))     
pdf(file="correlation.pdf", width=9, height=6)
ggplot(data=b, aes(x=cor, y=immune, color=Software))+
	labs(x="Correlation coefficient",y="Immune cell")+
	geom_point(size=4.1)+
	theme(panel.background=element_rect(fill="white",size=1,color="black"),
	      panel.grid=element_line(color="grey75",size=0.5),
	      axis.ticks = element_line(size=0.5),
	      axis.text.y = ggtext::element_markdown(colour=rev(colslabels)))
dev.off()